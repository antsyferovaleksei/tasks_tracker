const https = require('https');

async function createTablesDirectly() {
  require('dotenv').config();
  
  const supabaseUrl = 'https://gwkyqchyuihmgpvqosvk.supabase.co';
  const supabaseKey = process.env.SUPABASE_KEY;

  console.log('üöÄ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å —á–µ—Ä–µ–∑ –ø—Ä—è–º–∏–π SQL...');

  // –í—Å—ñ SQL –∫–æ–º–∞–Ω–¥–∏ –≤ –æ–¥–Ω–æ–º—É –∑–∞–ø–∏—Ç—ñ
  const sql = `
    -- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ users
    CREATE TABLE IF NOT EXISTS users (
      id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
      email TEXT UNIQUE NOT NULL,
      name TEXT NOT NULL,
      password TEXT NOT NULL,
      avatar TEXT,
      created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
    );

    -- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ projects
    CREATE TABLE IF NOT EXISTS projects (
      id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
      name TEXT NOT NULL,
      description TEXT,
      color TEXT DEFAULT '#1976d2',
      archived BOOLEAN DEFAULT FALSE,
      user_id UUID REFERENCES users(id) ON DELETE CASCADE,
      created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
    );

    -- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ tasks
    CREATE TABLE IF NOT EXISTS tasks (
      id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
      title TEXT NOT NULL,
      description TEXT,
      status TEXT DEFAULT 'TODO',
      priority TEXT DEFAULT 'MEDIUM',
      due_date TIMESTAMP WITH TIME ZONE,
      completed_at TIMESTAMP WITH TIME ZONE,
      archived BOOLEAN DEFAULT FALSE,
      user_id UUID REFERENCES users(id) ON DELETE CASCADE,
      project_id UUID REFERENCES projects(id) ON DELETE SET NULL,
      created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
    );

    -- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ tags
    CREATE TABLE IF NOT EXISTS tags (
      id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
      name TEXT UNIQUE NOT NULL,
      color TEXT DEFAULT '#666666',
      created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
    );

    -- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ task_tags
    CREATE TABLE IF NOT EXISTS task_tags (
      task_id UUID REFERENCES tasks(id) ON DELETE CASCADE,
      tag_id UUID REFERENCES tags(id) ON DELETE CASCADE,
      PRIMARY KEY (task_id, tag_id)
    );

    -- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—ñ–≤
    CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
    CREATE INDEX IF NOT EXISTS idx_projects_user_id ON projects(user_id);
    CREATE INDEX IF NOT EXISTS idx_tasks_user_id ON tasks(user_id);
    CREATE INDEX IF NOT EXISTS idx_tasks_project_id ON tasks(project_id);
    CREATE INDEX IF NOT EXISTS idx_tasks_status ON tasks(status);
  `;

  try {
    // –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ SQL —á–µ—Ä–µ–∑ PostgREST API
    const postData = JSON.stringify({
      query: sql
    });

    const options = {
      hostname: 'gwkyqchyuihmgpvqosvk.supabase.co',
      port: 443,
      path: '/rest/v1/rpc/exec_sql',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(postData),
        'apikey': supabaseKey,
        'Authorization': `Bearer ${supabaseKey}`
      }
    };

    console.log('üì° –ù–∞–¥—Å–∏–ª–∞—é SQL –¥–æ Supabase...');

    const req = https.request(options, (res) => {
      let data = '';

      res.on('data', (chunk) => {
        data += chunk;
      });

      res.on('end', () => {
        console.log('üì® –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Supabase:', res.statusCode);
        console.log('üìÑ –î–∞–Ω—ñ:', data);
        
        if (res.statusCode === 200) {
          console.log('‚úÖ SQL –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
          testTables();
        } else {
          console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è SQL');
          console.log('–°—Ç–≤–æ—Ä—ñ—Ç—å —Ç–∞–±–ª–∏—Ü—ñ –≤—Ä—É—á–Ω—É –≤ Dashboard:');
          console.log('https://supabase.com/dashboard/project/gwkyqchyuihmgpvqosvk/editor');
        }
      });
    });

    req.on('error', (e) => {
      console.error('üí• –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É:', e.message);
      console.log('\nüìã –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ü–µ–π SQL –≤ Dashboard:');
      console.log(sql);
    });

    req.write(postData);
    req.end();

  } catch (error) {
    console.error('üí• –ü–æ–º–∏–ª–∫–∞:', error.message);
    console.log('\nüìã –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ü–µ–π SQL –≤ Dashboard:');
    console.log(sql);
  }
}

async function testTables() {
  const { createClient } = require('@supabase/supabase-js');
  require('dotenv').config();
  
  const supabaseUrl = 'https://gwkyqchyuihmgpvqosvk.supabase.co';
  const supabaseKey = process.env.SUPABASE_KEY;
  
  const supabase = createClient(supabaseUrl, supabaseKey);

  console.log('\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å...');

  try {
    const { data, error } = await supabase.from('users').select('count');
    if (error) {
      console.log('‚ùå –¢–∞–±–ª–∏—Ü—ñ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ñ:', error.message);
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ñ —Å—Ç–≤–æ—Ä–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ!');
    }
  } catch (err) {
    console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:', err.message);
  }
}

createTablesDirectly(); 