import React, { useState } from 'react';
import {
  Box,
  Button,
  TextField,
  Typography,
  Card,
  CardContent,
  Alert,
  CircularProgress,
} from '@mui/material';
import apiClient from '../api/client';
import { authService } from '../api/supabase-auth';
import { projectsService } from '../api/supabase-data';
import { useSupabaseAuth } from '../contexts/SupabaseAuthContext';

export default function TestPage() {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const { user, signOut } = useSupabaseAuth();
  const [loginData, setLoginData] = useState({
    email: 'user@gmail.com',
    password: 'password123456'
  });
  const [registerData, setRegisterData] = useState({
    email: 'newuser@gmail.com',
    password: 'password123456',
    name: '–ù–æ–≤–∏–π –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'
  });
  const [projectData, setProjectData] = useState({
    name: 'Test Project –∑ UI',
    description: 'Project description created with UI',
    color: '#2196f3',
    archived: false
  });
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [projects, setProjects] = useState<any[]>([]);
  const [healthStatus, setHealthStatus] = useState<string>('');

  const handleHealthCheck = async () => {
    setLoading(true);
    setError('');
    setHealthStatus('');
    try {
      const response = await apiClient.healthCheck();
      setHealthStatus(`‚úÖ API –ø—Ä–∞—Ü—é—î! ${response.timestamp}`);
      setSuccess('Health check –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ!');
    } catch (err: any) {
      console.error('Health check error:', err);
      setHealthStatus('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π (–æ—á—ñ–∫—É–≤–∞–Ω–æ –Ω–∞ Vercel)');
      setError('–ö–∞—Å—Ç–æ–º–Ω—ñ API endpoints –Ω–µ –ø—Ä–∞—Ü—é—é—Ç—å –Ω–∞ Vercel Free tier. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ Supabase Auth –Ω–∏–∂—á–µ!');
    } finally {
      setLoading(false);
    }
  };

  const handleSupabaseRegister = async () => {
    setLoading(true);
    setError('');
    try {
      const result = await authService.signUp(
        registerData.email, 
        registerData.password, 
        { name: registerData.name }
      );
      
      if (result.user) {
        setSuccess(`‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${result.user.email}. –¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ —É–≤—ñ–π—Ç–∏ –∑ —Ç–∏–º–∏ –∂ –¥–∞–Ω–∏–º–∏.`);
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∫–æ–ø—ñ—é—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –≤—Ö–æ–¥—É
        setLoginData({
          email: registerData.email,
          password: registerData.password
        });
      } else {
        setSuccess('‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ email –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—É.');
      }
      
      console.log('Supabase registration result:', result);
    } catch (err: any) {
      console.error('Registration error:', err);
      setError('–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: ' + (err.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'));
    } finally {
      setLoading(false);
    }
  };

  const handleSupabaseLogin = async () => {
    setLoading(true);
    setError('');
    try {
      const result = await authService.signIn(loginData.email, loginData.password);
      setIsLoggedIn(true);
      setSuccess(`‚úÖ –í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π! –í—ñ—Ç–∞—î–º–æ, ${result.user?.email}!`);
      console.log('Supabase login result:', result);
    } catch (err: any) {
      console.error('Login error:', err);
      if (err.message.includes('Email not confirmed')) {
        setError('üìß Email –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏–π. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ—à—Ç—É –∞–±–æ –≤–∏–º–∫–Ω—ñ—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è email –≤ Supabase Dashboard ‚Üí Auth ‚Üí Settings.');
      } else if (err.message.includes('Invalid login credentials')) {
        setError('‚ùå –ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –≤—Ö–æ–¥—É. –°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ email/–ø–∞—Ä–æ–ª—å.');
      } else {
        setError('–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É: ' + (err.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'));
      }
    } finally {
      setLoading(false);
    }
  };

  const handleLogin = async () => {
    setLoading(true);
    setError('');
    try {
      const response = await apiClient.login(loginData);
      if (response.success && response.data) {
        localStorage.setItem('accessToken', response.data.accessToken);
        localStorage.setItem('refreshToken', response.data.refreshToken);
        setIsLoggedIn(true);
        setSuccess('Success login!');
      }
    } catch (err: any) {
      setError(err.response?.data?.message || 'Login error');
    } finally {
      setLoading(false);
    }
  };

  const handleCreateProject = async () => {
    setLoading(true);
    setError('');
    try {
      const project = await projectsService.createProject({
        name: projectData.name,
        description: projectData.description,
        color: projectData.color,
        archived: projectData.archived
      });
      setSuccess(`‚úÖ –ü—Ä–æ–µ–∫—Ç "${project.name}" —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!`);
      loadProjects();
    } catch (err: any) {
      console.error('Project creation error:', err);
      setError('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É: ' + (err.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'));
    } finally {
      setLoading(false);
    }
  };

  const loadProjects = async () => {
    try {
      const projects = await projectsService.getProjects();
      setProjects(projects);
      setSuccess(`‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${projects.length} –ø—Ä–æ–µ–∫—Ç—ñ–≤`);
    } catch (err: any) {
      console.error('Projects loading error:', err);
      setError('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—ñ–≤: ' + (err.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'));
    }
  };

  return (
    <Box p={3} maxWidth={800} mx="auto">
      <Typography variant="h4" mb={3}>
        –¢–µ—Å—Ç–æ–≤–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ API
      </Typography>

      <Alert severity="info" sx={{ mb: 3 }}>
        <strong>–ü–æ—Ç–æ—á–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á:</strong> {user ? user.email : '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π'}
        {user && (
          <Button 
            size="small" 
            onClick={signOut} 
            sx={{ ml: 2 }}
            variant="outlined"
          >
            –í–∏–π—Ç–∏
          </Button>
        )}
      </Alert>

      <Card sx={{ mb: 3 }}>
        <CardContent>
          <Typography variant="h6" mb={2}>
            0. Health Check API
          </Typography>
          <Button
            variant="outlined"
            onClick={handleHealthCheck}
            disabled={loading}
            startIcon={loading ? <CircularProgress size={20} /> : null}
            sx={{ mb: 2 }}
          >
            {loading ? '–ü–µ—Ä–µ–≤—ñ—Ä—è—é...' : '–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ API'}
          </Button>
          {healthStatus && (
            <Typography 
              variant="body2" 
              color={healthStatus.includes('‚úÖ') ? 'success.main' : 'warning.main'}
              sx={{ mt: 1, fontWeight: 'bold' }}
            >
              {healthStatus}
            </Typography>
          )}
        </CardContent>
      </Card>

      <Card sx={{ mb: 3 }}>
        <CardContent>
          <Typography variant="h6" mb={2} color="primary">
            üöÄ Supabase Auth (–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ)
          </Typography>
          
          <Alert severity="info" sx={{ mb: 2 }}>
            –°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø–æ—Ç—ñ–º —É–≤—ñ–π–¥—ñ—Ç—å –∑ —Ç–∏–º–∏ –∂ –¥–∞–Ω–∏–º–∏.
          </Alert>
          
          <Typography variant="subtitle2" gutterBottom>
            –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
          </Typography>
          <Box display="flex" flexDirection="column" gap={2} mb={3}>
            <TextField
              label="Email"
              type="email"
              value={registerData.email}
              onChange={(e) => setRegisterData({...registerData, email: e.target.value})}
            />
            <TextField
              label="–ü–∞—Ä–æ–ª—å"
              type="password"
              value={registerData.password}
              onChange={(e) => setRegisterData({...registerData, password: e.target.value})}
            />
            <TextField
              label="–Ü–º'—è"
              value={registerData.name}
              onChange={(e) => setRegisterData({...registerData, name: e.target.value})}
            />
            <Button 
              variant="contained" 
              color="primary"
              onClick={handleSupabaseRegister}
              disabled={loading}
              startIcon={loading ? <CircularProgress size={20} /> : null}
            >
              {loading ? '–†–µ—î—Å—Ç—Ä—É—é...' : '–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è —á–µ—Ä–µ–∑ Supabase'}
            </Button>
            
            <Button 
              variant="outlined" 
              size="small"
              onClick={() => setLoginData({
                email: registerData.email,
                password: registerData.password
              })}
              sx={{ ml: 1 }}
            >
              üìã –ö–æ–ø—ñ—é–≤–∞—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –≤—Ö–æ–¥—É
            </Button>
          </Box>

          <Typography variant="subtitle2" gutterBottom>
            –í—Ö—ñ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
          </Typography>
          <Box display="flex" flexDirection="column" gap={2}>
            <TextField
              label="Email"
              type="email"
              value={loginData.email}
              onChange={(e) => setLoginData({...loginData, email: e.target.value})}
            />
            <TextField
              label="–ü–∞—Ä–æ–ª—å"
              type="password"
              value={loginData.password}
              onChange={(e) => setLoginData({...loginData, password: e.target.value})}
            />
            <Button 
              variant="contained"
              color="secondary"
              onClick={handleSupabaseLogin}
              disabled={loading}
              startIcon={loading ? <CircularProgress size={20} /> : null}
            >
              {loading ? '–í—Ö–æ–¥–∂—É...' : '–£–≤—ñ–π—Ç–∏ —á–µ—Ä–µ–∑ Supabase'}
            </Button>
          </Box>
        </CardContent>
      </Card>

      {error && (
        <Alert severity="error" sx={{ mb: 2 }}>
          {error}
        </Alert>
      )}

      {success && (
        <Alert severity="success" sx={{ mb: 2 }}>
          {success}
        </Alert>
      )}

      {!isLoggedIn ? (
        <Card sx={{ mb: 3 }}>
          <CardContent>
            <Typography variant="h6" mb={2}>
              1. –í—Ö—ñ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
            </Typography>
            <Box display="flex" flexDirection="column" gap={2}>
              <TextField
                label="Email"
                type="email"
                value={loginData.email}
                onChange={(e) => setLoginData({ ...loginData, email: e.target.value })}
              />
              <TextField
                label="Password"
                type="password"
                value={loginData.password}
                onChange={(e) => setLoginData({ ...loginData, password: e.target.value })}
              />
              <Button
                variant="contained"
                onClick={handleLogin}
                disabled={loading}
                startIcon={loading ? <CircularProgress size={20} /> : null}
              >
                {loading ? 'Login...' : 'Login'}
              </Button>
            </Box>
          </CardContent>
        </Card>
      ) : (
        <Box>
          <Card sx={{ mb: 3 }}>
            <CardContent>
              <Typography variant="h6" mb={2}>
                2. Create project
              </Typography>
              <Box display="flex" flexDirection="column" gap={2}>
                <TextField
                  label="Project name"
                  value={projectData.name}
                  onChange={(e) => setProjectData({ ...projectData, name: e.target.value })}
                />
                <TextField
                  label="Description"
                  value={projectData.description}
                  onChange={(e) => setProjectData({ ...projectData, description: e.target.value })}
                  multiline
                  rows={3}
                />
                <TextField
                  label="Color"
                  type="color"
                  value={projectData.color}
                  onChange={(e) => setProjectData({ ...projectData, color: e.target.value })}
                />
                <Button
                  variant="contained"
                  onClick={handleCreateProject}
                  disabled={loading || !projectData.name}
                  startIcon={loading ? <CircularProgress size={20} /> : null}
                >
                  {loading ? 'Creating...' : 'Create project'}
                </Button>
              </Box>
            </CardContent>
          </Card>

          <Card>
            <CardContent>
              <Typography variant="h6" mb={2}>
                3. –Ü—Å–Ω—É—é—á—ñ project–∏
              </Typography>
              <Button onClick={loadProjects} variant="outlined" sx={{ mb: 2 }}>
                –û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫
              </Button>
              {projects.length > 0 ? (
                projects.map((project) => (
                  <Box key={project.id} p={2} border="1px solid #ddd" borderRadius={1} mb={1}>
                    <Typography variant="subtitle1">{project.name}</Typography>
                    <Typography variant="body2" color="text.secondary">
                      {project.description}
                    </Typography>
                    <Typography variant="caption">
                      –°—Ç–≤–æ—Ä–µ–Ω–æ: {new Date(project.createdAt).toLocaleString()}
                    </Typography>
                  </Box>
                ))
              ) : (
                <Typography color="text.secondary">Projects –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</Typography>
              )}
            </CardContent>
          </Card>
        </Box>
      )}
    </Box>
  );
} 